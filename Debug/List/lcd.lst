
AVRASM ver. 2.1.30  D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm Sun Jan 22 22:22:38 2023

D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i=R4
                 	.DEF _i_msb=R5
                 	.DEF _j=R6
                 	.DEF _j_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0068 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G101:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G101:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x3:
000035 3231
000036 3433
000037 4241      	.DB  0x31,0x32,0x33,0x34,0x41,0x42
                 _0x0:
000038 6170
000039 7373
00003a 6f77
00003b 6472      	.DB  0x70,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
00003c 6920
00003d 2073
00003e 6f63
00003f 7272      	.DB  0x20,0x69,0x73,0x20,0x63,0x6F,0x72,0x72
000040 6365
000041 0074
000042 6425
000043 4100      	.DB  0x65,0x63,0x74,0x0,0x25,0x64,0x0,0x41
000044 4200
000045 4300
000046 4400
D:\courses\university\term 5\micro\project\Show_password-on-LCD\Debug\List\lcd.asm(1141): warning: .cseg .db misalignment - padding zero byte
000047 0000      	.DB  0x0,0x42,0x0,0x43,0x0,0x44,0x0
                 _0x2000003:
000048 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000049 0004      	.DW  0x04
00004a 0004      	.DW  0x04
00004b 0066      	.DW  __REG_VARS*2
                 
00004c 0006      	.DW  0x06
00004d 01a6      	.DW  _password
00004e 006a      	.DW  _0x3*2
                 
00004f 0014      	.DW  0x14
000050 0160      	.DW  _0x8
000051 0070      	.DW  _0x0*2
                 
000052 0001      	.DW  0x01
000053 0174      	.DW  _0x8+20
000054 0083      	.DW  _0x0*2+19
                 
000055 0002      	.DW  0x02
000056 0175      	.DW  _0x14
000057 0087      	.DW  _0x0*2+23
                 
000058 0002      	.DW  0x02
000059 0177      	.DW  _0x14+2
00005a 0089      	.DW  _0x0*2+25
                 
00005b 0002      	.DW  0x02
00005c 0179      	.DW  _0x14+4
00005d 008b      	.DW  _0x0*2+27
                 
00005e 0002      	.DW  0x02
00005f 017b      	.DW  _0x14+6
000060 008d      	.DW  _0x0*2+29
                 
000061 0001      	.DW  0x01
000062 017d      	.DW  _0x14+8
000063 0083      	.DW  _0x0*2+19
                 
000064 0002      	.DW  0x02
000065 01c4      	.DW  __base_y_G100
000066 0090      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000067 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000068 94f8      	CLI
000069 27ee      	CLR  R30
00006a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00006b e0f1      	LDI  R31,1
00006c bffb      	OUT  GICR,R31
00006d bfeb      	OUT  GICR,R30
00006e bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00006f e08d      	LDI  R24,(14-2)+1
000070 e0a2      	LDI  R26,2
000071 27bb      	CLR  R27
                 __CLEAR_REG:
000072 93ed      	ST   X+,R30
000073 958a      	DEC  R24
000074 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000075 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000076 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000077 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000078 93ed      	ST   X+,R30
000079 9701      	SBIW R24,1
00007a f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00007b e9e2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00007c e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00007d 9185      	LPM  R24,Z+
00007e 9195      	LPM  R25,Z+
00007f 9700      	SBIW R24,0
000080 f061      	BREQ __GLOBAL_INI_END
000081 91a5      	LPM  R26,Z+
000082 91b5      	LPM  R27,Z+
000083 9005      	LPM  R0,Z+
000084 9015      	LPM  R1,Z+
000085 01bf      	MOVW R22,R30
000086 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000087 9005      	LPM  R0,Z+
000088 920d      	ST   X+,R0
000089 9701      	SBIW R24,1
00008a f7e1      	BRNE __GLOBAL_INI_LOOP
00008b 01fb      	MOVW R30,R22
00008c cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00008d e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00008e bfed      	OUT  SPL,R30
00008f e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000090 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000091 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000092 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000093 940c 0095 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 1/18/2023
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega16
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 8.000000 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega16.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Alphanumeric LCD functions
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <string.h>
                 ;// Declare your global variables here
                 ;int keypad(void);
                 ;void lcd(int c);
                 ;
                 ;
                 ;int i=0;
                 ;int j=0;
                 ;char str[10];
                 ;char input_password[30]="";
                 ;char password[30]="1234AB";
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 002B {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 002C // Declare your local variables here
                 ; 0000 002D 
                 ; 0000 002E // Input/Output Ports initialization
                 ; 0000 002F // Port A initialization
                 ; 0000 0030 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 0031 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
000095 e0ef      	LDI  R30,LOW(15)
000096 bbea      	OUT  0x1A,R30
                 ; 0000 0032 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 0033 PORTA=(1<<PORTA7) | (1<<PORTA6) | (1<<PORTA5) | (1<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000097 efe0      	LDI  R30,LOW(240)
000098 bbeb      	OUT  0x1B,R30
                 ; 0000 0034 
                 ; 0000 0035 // Port B initialization
                 ; 0000 0036 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0037 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000099 e0e0      	LDI  R30,LOW(0)
00009a bbe7      	OUT  0x17,R30
                 ; 0000 0038 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0039 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
00009b bbe8      	OUT  0x18,R30
                 ; 0000 003A 
                 ; 0000 003B // Port C initialization
                 ; 0000 003C // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 003D DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00009c bbe4      	OUT  0x14,R30
                 ; 0000 003E // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 003F PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
00009d bbe5      	OUT  0x15,R30
                 ; 0000 0040 
                 ; 0000 0041 // Port D initialization
                 ; 0000 0042 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 0043 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
00009e bbe1      	OUT  0x11,R30
                 ; 0000 0044 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 0045 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00009f bbe2      	OUT  0x12,R30
                 ; 0000 0046 
                 ; 0000 0047 // Timer/Counter 0 initialization
                 ; 0000 0048 // Clock source: System Clock
                 ; 0000 0049 // Clock value: Timer 0 Stopped
                 ; 0000 004A // Mode: Normal top=0xFF
                 ; 0000 004B // OC0 output: Disconnected
                 ; 0000 004C TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000a0 bfe3      	OUT  0x33,R30
                 ; 0000 004D TCNT0=0x00;
0000a1 bfe2      	OUT  0x32,R30
                 ; 0000 004E OCR0=0x00;
0000a2 bfec      	OUT  0x3C,R30
                 ; 0000 004F 
                 ; 0000 0050 // Timer/Counter 1 initialization
                 ; 0000 0051 // Clock source: System Clock
                 ; 0000 0052 // Clock value: Timer1 Stopped
                 ; 0000 0053 // Mode: Normal top=0xFFFF
                 ; 0000 0054 // OC1A output: Disconnected
                 ; 0000 0055 // OC1B output: Disconnected
                 ; 0000 0056 // Noise Canceler: Off
                 ; 0000 0057 // Input Capture on Falling Edge
                 ; 0000 0058 // Timer1 Overflow Interrupt: Off
                 ; 0000 0059 // Input Capture Interrupt: Off
                 ; 0000 005A // Compare A Match Interrupt: Off
                 ; 0000 005B // Compare B Match Interrupt: Off
                 ; 0000 005C TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000a3 bdef      	OUT  0x2F,R30
                 ; 0000 005D TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
0000a4 bdee      	OUT  0x2E,R30
                 ; 0000 005E TCNT1H=0x00;
0000a5 bded      	OUT  0x2D,R30
                 ; 0000 005F TCNT1L=0x00;
0000a6 bdec      	OUT  0x2C,R30
                 ; 0000 0060 ICR1H=0x00;
0000a7 bde7      	OUT  0x27,R30
                 ; 0000 0061 ICR1L=0x00;
0000a8 bde6      	OUT  0x26,R30
                 ; 0000 0062 OCR1AH=0x00;
0000a9 bdeb      	OUT  0x2B,R30
                 ; 0000 0063 OCR1AL=0x00;
0000aa bdea      	OUT  0x2A,R30
                 ; 0000 0064 OCR1BH=0x00;
0000ab bde9      	OUT  0x29,R30
                 ; 0000 0065 OCR1BL=0x00;
0000ac bde8      	OUT  0x28,R30
                 ; 0000 0066 
                 ; 0000 0067 // Timer/Counter 2 initialization
                 ; 0000 0068 // Clock source: System Clock
                 ; 0000 0069 // Clock value: Timer2 Stopped
                 ; 0000 006A // Mode: Normal top=0xFF
                 ; 0000 006B // OC2 output: Disconnected
                 ; 0000 006C ASSR=0<<AS2;
0000ad bde2      	OUT  0x22,R30
                 ; 0000 006D TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
0000ae bde5      	OUT  0x25,R30
                 ; 0000 006E TCNT2=0x00;
0000af bde4      	OUT  0x24,R30
                 ; 0000 006F OCR2=0x00;
0000b0 bde3      	OUT  0x23,R30
                 ; 0000 0070 
                 ; 0000 0071 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0072 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
0000b1 bfe9      	OUT  0x39,R30
                 ; 0000 0073 
                 ; 0000 0074 // External Interrupt(s) initialization
                 ; 0000 0075 // INT0: Off
                 ; 0000 0076 // INT1: Off
                 ; 0000 0077 // INT2: Off
                 ; 0000 0078 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
0000b2 bfe5      	OUT  0x35,R30
                 ; 0000 0079 MCUCSR=(0<<ISC2);
0000b3 bfe4      	OUT  0x34,R30
                 ; 0000 007A 
                 ; 0000 007B // USART initialization
                 ; 0000 007C // USART disabled
                 ; 0000 007D UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0000b4 b9ea      	OUT  0xA,R30
                 ; 0000 007E 
                 ; 0000 007F // Analog Comparator initialization
                 ; 0000 0080 // Analog Comparator: Off
                 ; 0000 0081 // The Analog Comparator's positive input is
                 ; 0000 0082 // connected to the AIN0 pin
                 ; 0000 0083 // The Analog Comparator's negative input is
                 ; 0000 0084 // connected to the AIN1 pin
                 ; 0000 0085 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000b5 e8e0      	LDI  R30,LOW(128)
0000b6 b9e8      	OUT  0x8,R30
                 ; 0000 0086 SFIOR=(0<<ACME);
0000b7 e0e0      	LDI  R30,LOW(0)
0000b8 bfe0      	OUT  0x30,R30
                 ; 0000 0087 
                 ; 0000 0088 // ADC initialization
                 ; 0000 0089 // ADC disabled
                 ; 0000 008A ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000b9 b9e6      	OUT  0x6,R30
                 ; 0000 008B 
                 ; 0000 008C // SPI initialization
                 ; 0000 008D // SPI disabled
                 ; 0000 008E SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000ba b9ed      	OUT  0xD,R30
                 ; 0000 008F 
                 ; 0000 0090 // TWI initialization
                 ; 0000 0091 // TWI disabled
                 ; 0000 0092 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000bb bfe6      	OUT  0x36,R30
                 ; 0000 0093 
                 ; 0000 0094 // Alphanumeric LCD initialization
                 ; 0000 0095 // Connections are specified in the
                 ; 0000 0096 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 0097 // RS - PORTD Bit 0
                 ; 0000 0098 // RD - PORTD Bit 1
                 ; 0000 0099 // EN - PORTD Bit 2
                 ; 0000 009A // D4 - PORTD Bit 4
                 ; 0000 009B // D5 - PORTD Bit 5
                 ; 0000 009C // D6 - PORTD Bit 6
                 ; 0000 009D // D7 - PORTD Bit 7
                 ; 0000 009E // Characters/line: 16
                 ; 0000 009F lcd_init(16);
0000bc e1a0      	LDI  R26,LOW(16)
0000bd 940e 027f 	CALL _lcd_init
                 ; 0000 00A0 
                 ; 0000 00A1 while (1)
                 _0x4:
                 ; 0000 00A2       {
                 ; 0000 00A3      int a=100;
                 ; 0000 00A4      a=keypad();
0000bf 9722      	SBIW R28,2
0000c0 e6e4      	LDI  R30,LOW(100)
0000c1 83e8      	ST   Y,R30
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 83e9      	STD  Y+1,R30
                 ;	a -> Y+0
0000c4 d0f2      	RCALL _keypad
0000c5 83e8      	ST   Y,R30
0000c6 83f9      	STD  Y+1,R31
                 ; 0000 00A5      lcd(a);
0000c7 81a8      	LD   R26,Y
0000c8 81b9      	LDD  R27,Y+1
0000c9 d01d      	RCALL _lcd
                 ; 0000 00A6 
                 ; 0000 00A7      //check if pin is correct
                 ; 0000 00A8      if(strcmp(input_password,password)==0){
0000ca 940e 04a0 	CALL SUBOPT_0x0
0000cc eaa6      	LDI  R26,LOW(_password)
0000cd e0b1      	LDI  R27,HIGH(_password)
0000ce 940e 0466 	CALL _strcmp
0000d0 30e0      	CPI  R30,0
0000d1 f471      	BRNE _0x7
                 ; 0000 00A9         lcd_clear();
0000d2 d169      	RCALL _lcd_clear
                 ; 0000 00AA         lcd_puts("password is correct");
                +
0000d3 e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
0000d4 e0b1     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
0000d5 d187      	RCALL _lcd_puts
                 ; 0000 00AB         strcpy(input_password,"");
0000d6 940e 04a0 	CALL SUBOPT_0x0
                +
0000d8 e7a4     +LDI R26 , LOW ( _0x8 + ( 20 ) )
0000d9 e0b1     +LDI R27 , HIGH ( _0x8 + ( 20 ) )
                 	__POINTW2MN _0x8,20
0000da 940e 047a 	CALL _strcpy
                 ; 0000 00AC         delay_ms(5000);
0000dc e8a8      	LDI  R26,LOW(5000)
0000dd e1b3      	LDI  R27,HIGH(5000)
0000de 940e 04e9 	CALL _delay_ms
                 ; 0000 00AD      }
                 ; 0000 00AE 
                 ; 0000 00AF      delay_ms(200);
                 _0x7:
0000e0 eca8      	LDI  R26,LOW(200)
0000e1 e0b0      	LDI  R27,0
0000e2 940e 04e9 	CALL _delay_ms
                 ; 0000 00B0       }
0000e4 9622      	ADIW R28,2
0000e5 cfd9      	RJMP _0x4
                 ; 0000 00B1 
                 ; 0000 00B2 }
                 _0x9:
0000e6 cfff      	RJMP _0x9
                 ; .FEND
                 
                 	.DSEG
                 _0x8:
000160           	.BYTE 0x15
                 ;
                 ; void lcd(int c){
                 ; 0000 00B4 void lcd(int c){
                 
                 	.CSEG
                 _lcd:
                 ; .FSTART _lcd
                 ; 0000 00B5 
                 ; 0000 00B6         if(c<10 && c!=100){
0000e7 93ba      	ST   -Y,R27
0000e8 93aa      	ST   -Y,R26
                 ;	c -> Y+0
0000e9 81a8      	LD   R26,Y
0000ea 81b9      	LDD  R27,Y+1
0000eb 971a      	SBIW R26,10
0000ec f434      	BRGE _0xB
0000ed 81a8      	LD   R26,Y
0000ee 81b9      	LDD  R27,Y+1
0000ef 36a4      	CPI  R26,LOW(0x64)
0000f0 e0e0      	LDI  R30,HIGH(0x64)
0000f1 07be      	CPC  R27,R30
0000f2 f409      	BRNE _0xC
                 _0xB:
0000f3 c01d      	RJMP _0xA
                 _0xC:
                 ; 0000 00B7         sprintf(str,"%d",c);
0000f4 e7ee      	LDI  R30,LOW(_str)
0000f5 e0f1      	LDI  R31,HIGH(_str)
0000f6 93fa      	ST   -Y,R31
0000f7 93ea      	ST   -Y,R30
                +
0000f8 e8e4     +LDI R30 , LOW ( 2 * _0x0 + ( 20 ) )
0000f9 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 20 ) )
                 	__POINTW1FN _0x0,20
0000fa 93fa      	ST   -Y,R31
0000fb 93ea      	ST   -Y,R30
0000fc 81ec      	LDD  R30,Y+4
0000fd 81fd      	LDD  R31,Y+4+1
0000fe 940e 04fb 	CALL __CWD1
000100 940e 0538 	CALL __PUTPARD1
000102 e084      	LDI  R24,4
000103 940e 0421 	CALL _sprintf
000105 9628      	ADIW R28,8
                 ; 0000 00B8         strcat(input_password,str);
000106 940e 04a0 	CALL SUBOPT_0x0
000108 e7ae      	LDI  R26,LOW(_str)
000109 e0b1      	LDI  R27,HIGH(_str)
00010a 940e 0455 	CALL _strcat
                 ; 0000 00B9         lcd_puts(str);
00010c e7ae      	LDI  R26,LOW(_str)
00010d e0b1      	LDI  R27,HIGH(_str)
00010e d14e      	RCALL _lcd_puts
                 ; 0000 00BA         i++;
00010f 940e 04a5 	CALL SUBOPT_0x1
                 ; 0000 00BB         lcd_gotoxy(i,j);
                 ; 0000 00BC         }
                 ; 0000 00BD         if(c>=10 && c!=14 && c!=15 && c!=100){
                 _0xA:
000111 81a8      	LD   R26,Y
000112 81b9      	LDD  R27,Y+1
000113 971a      	SBIW R26,10
000114 f074      	BRLT _0xE
000115 81a8      	LD   R26,Y
000116 81b9      	LDD  R27,Y+1
000117 971e      	SBIW R26,14
000118 f051      	BREQ _0xE
000119 81a8      	LD   R26,Y
00011a 81b9      	LDD  R27,Y+1
00011b 971f      	SBIW R26,15
00011c f031      	BREQ _0xE
00011d 81a8      	LD   R26,Y
00011e 81b9      	LDD  R27,Y+1
00011f 36a4      	CPI  R26,LOW(0x64)
000120 e0e0      	LDI  R30,HIGH(0x64)
000121 07be      	CPC  R27,R30
000122 f409      	BRNE _0xF
                 _0xE:
000123 c031      	RJMP _0xD
                 _0xF:
                 ; 0000 00BE             switch(c)
000124 81e8      	LD   R30,Y
000125 81f9      	LDD  R31,Y+1
                 ; 0000 00BF             {
                 ; 0000 00C0                 case 10:
000126 30ea      	CPI  R30,LOW(0xA)
000127 e0a0      	LDI  R26,HIGH(0xA)
000128 07fa      	CPC  R31,R26
000129 f439      	BRNE _0x13
                 ; 0000 00C1                 lcd_putsf("A");
                +
00012a e8a7     +LDI R26 , LOW ( 2 * _0x0 + ( 23 ) )
00012b e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 23 ) )
                 	__POINTW2FN _0x0,23
00012c 940e 04ac 	CALL SUBOPT_0x2
                 ; 0000 00C2                 strcat(input_password,"A");
                +
00012e e7a5     +LDI R26 , LOW ( _0x14 + ( 0 ) )
00012f e0b1     +LDI R27 , HIGH ( _0x14 + ( 0 ) )
                 	__POINTW2MN _0x14,0
000130 c020      	RJMP _0x50
                 ; 0000 00C3                 i++;
                 ; 0000 00C4                 lcd_gotoxy(i,j);
                 ; 0000 00C5                 break;
                 ; 0000 00C6 
                 ; 0000 00C7                 case 11:
                 _0x13:
000131 30eb      	CPI  R30,LOW(0xB)
000132 e0a0      	LDI  R26,HIGH(0xB)
000133 07fa      	CPC  R31,R26
000134 f439      	BRNE _0x15
                 ; 0000 00C8                 lcd_putsf("B");
                +
000135 e8a9     +LDI R26 , LOW ( 2 * _0x0 + ( 25 ) )
000136 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 25 ) )
                 	__POINTW2FN _0x0,25
000137 940e 04ac 	CALL SUBOPT_0x2
                 ; 0000 00C9                 strcat(input_password,"B");
                +
000139 e7a7     +LDI R26 , LOW ( _0x14 + ( 2 ) )
00013a e0b1     +LDI R27 , HIGH ( _0x14 + ( 2 ) )
                 	__POINTW2MN _0x14,2
00013b c015      	RJMP _0x50
                 ; 0000 00CA                 i++;
                 ; 0000 00CB                 lcd_gotoxy(i,j);
                 ; 0000 00CC                 break;
                 ; 0000 00CD 
                 ; 0000 00CE                 case 12:
                 _0x15:
00013c 30ec      	CPI  R30,LOW(0xC)
00013d e0a0      	LDI  R26,HIGH(0xC)
00013e 07fa      	CPC  R31,R26
00013f f439      	BRNE _0x16
                 ; 0000 00CF                 lcd_putsf("C");
                +
000140 e8ab     +LDI R26 , LOW ( 2 * _0x0 + ( 27 ) )
000141 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 27 ) )
                 	__POINTW2FN _0x0,27
000142 940e 04ac 	CALL SUBOPT_0x2
                 ; 0000 00D0                 strcat(input_password,"C");
                +
000144 e7a9     +LDI R26 , LOW ( _0x14 + ( 4 ) )
000145 e0b1     +LDI R27 , HIGH ( _0x14 + ( 4 ) )
                 	__POINTW2MN _0x14,4
000146 c00a      	RJMP _0x50
                 ; 0000 00D1                 i++;
                 ; 0000 00D2                 lcd_gotoxy(i,j);
                 ; 0000 00D3                 break;
                 ; 0000 00D4 
                 ; 0000 00D5                 case 13:
                 _0x16:
000147 30ed      	CPI  R30,LOW(0xD)
000148 e0a0      	LDI  R26,HIGH(0xD)
000149 07fa      	CPC  R31,R26
00014a f451      	BRNE _0x12
                 ; 0000 00D6                 lcd_putsf("D");
                +
00014b e8ad     +LDI R26 , LOW ( 2 * _0x0 + ( 29 ) )
00014c e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW2FN _0x0,29
00014d 940e 04ac 	CALL SUBOPT_0x2
                 ; 0000 00D7                 strcat(input_password,"D");
                +
00014f e7ab     +LDI R26 , LOW ( _0x14 + ( 6 ) )
000150 e0b1     +LDI R27 , HIGH ( _0x14 + ( 6 ) )
                 	__POINTW2MN _0x14,6
                 _0x50:
000151 940e 0455 	CALL _strcat
                 ; 0000 00D8                 i++;
000153 940e 04a5 	CALL SUBOPT_0x1
                 ; 0000 00D9                 lcd_gotoxy(i,j);
                 ; 0000 00DA                 break;
                 ; 0000 00DB 
                 ; 0000 00DC                 //case 14:
                 ; 0000 00DD                 //lcd_putsf("E");
                 ; 0000 00DE                 //i++;
                 ; 0000 00DF                 //lcd_gotoxy(i,j);
                 ; 0000 00E0                 //break;
                 ; 0000 00E1 
                 ; 0000 00E2                 //case 15:
                 ; 0000 00E3                 //lcd_putsf("F");
                 ; 0000 00E4                 //i++;
                 ; 0000 00E5                 //lcd_gotoxy(i,j);
                 ; 0000 00E6                 //break;
                 ; 0000 00E7             }
                 _0x12:
                 ; 0000 00E8         }
                 ; 0000 00E9 
                 ; 0000 00EA         //back
                 ; 0000 00EB         if(c==14){
                 _0xD:
000155 81a8      	LD   R26,Y
000156 81b9      	LDD  R27,Y+1
000157 971e      	SBIW R26,14
000158 f561      	BRNE _0x18
                 ; 0000 00EC         int len=strlen(input_password);
                 ; 0000 00ED         len--;
000159 9722      	SBIW R28,2
                 ;	c -> Y+2
                 ;	len -> Y+0
00015a e8a8      	LDI  R26,LOW(_input_password)
00015b e0b1      	LDI  R27,HIGH(_input_password)
00015c 940e 0487 	CALL _strlen
00015e 83e8      	ST   Y,R30
00015f 83f9      	STD  Y+1,R31
000160 9731      	SBIW R30,1
000161 83e8      	ST   Y,R30
000162 83f9      	STD  Y+1,R31
                 ; 0000 00EE         input_password[len]='\0';
000163 57e8      	SUBI R30,LOW(-_input_password)
000164 4ffe      	SBCI R31,HIGH(-_input_password)
000165 e0a0      	LDI  R26,LOW(0)
000166 83a0      	STD  Z+0,R26
                 ; 0000 00EF         lcd_clear();
000167 d0d4      	RCALL _lcd_clear
                 ; 0000 00F0         lcd_gotoxy(0,0);
000168 e0e0      	LDI  R30,LOW(0)
000169 93ea      	ST   -Y,R30
00016a e0a0      	LDI  R26,LOW(0)
00016b d0c3      	RCALL _lcd_gotoxy
                 ; 0000 00F1         lcd_puts(input_password);
00016c e8a8      	LDI  R26,LOW(_input_password)
00016d e0b1      	LDI  R27,HIGH(_input_password)
00016e d0ee      	RCALL _lcd_puts
                 ; 0000 00F2 
                 ; 0000 00F3         i=len%16;
00016f 81e8      	LD   R30,Y
000170 81f9      	LDD  R31,Y+1
000171 e0af      	LDI  R26,LOW(15)
000172 e0b0      	LDI  R27,HIGH(15)
000173 940e 0518 	CALL __MANDW12
000175 012f      	MOVW R4,R30
                 ; 0000 00F4         j=(len/16)%2;
000176 81a8      	LD   R26,Y
000177 81b9      	LDD  R27,Y+1
000178 e1e0      	LDI  R30,LOW(16)
000179 e0f0      	LDI  R31,HIGH(16)
00017a 940e 0513 	CALL __DIVW21
00017c e0a1      	LDI  R26,LOW(1)
00017d e0b0      	LDI  R27,HIGH(1)
00017e 940e 0518 	CALL __MANDW12
000180 013f      	MOVW R6,R30
                 ; 0000 00F5 
                 ; 0000 00F6         lcd_gotoxy(i,j);
000181 924a      	ST   -Y,R4
000182 2da6      	MOV  R26,R6
000183 d0ab      	RCALL _lcd_gotoxy
                 ; 0000 00F7         }
000184 9622      	ADIW R28,2
                 ; 0000 00F8 
                 ; 0000 00F9         //lock
                 ; 0000 00FA         if(c==15){
                 _0x18:
000185 81a8      	LD   R26,Y
000186 81b9      	LDD  R27,Y+1
000187 971f      	SBIW R26,15
000188 f471      	BRNE _0x19
                 ; 0000 00FB         i=0;
000189 2444      	CLR  R4
00018a 2455      	CLR  R5
                 ; 0000 00FC         j=0;
00018b 2466      	CLR  R6
00018c 2477      	CLR  R7
                 ; 0000 00FD         lcd_clear();
00018d d0ae      	RCALL _lcd_clear
                 ; 0000 00FE         lcd_gotoxy(i,j);
00018e 924a      	ST   -Y,R4
00018f 2da6      	MOV  R26,R6
000190 d09e      	RCALL _lcd_gotoxy
                 ; 0000 00FF         strcpy(input_password,"");
000191 940e 04a0 	CALL SUBOPT_0x0
                +
000193 e7ad     +LDI R26 , LOW ( _0x14 + ( 8 ) )
000194 e0b1     +LDI R27 , HIGH ( _0x14 + ( 8 ) )
                 	__POINTW2MN _0x14,8
000195 940e 047a 	CALL _strcpy
                 ; 0000 0100         }
                 ; 0000 0101 
                 ; 0000 0102         if(i==16 && j==0){
                 _0x19:
000197 e1e0      	LDI  R30,LOW(16)
000198 e0f0      	LDI  R31,HIGH(16)
000199 15e4      	CP   R30,R4
00019a 05f5      	CPC  R31,R5
00019b f421      	BRNE _0x1B
00019c 2400      	CLR  R0
00019d 1406      	CP   R0,R6
00019e 0407      	CPC  R0,R7
00019f f009      	BREQ _0x1C
                 _0x1B:
0001a0 c006      	RJMP _0x1A
                 _0x1C:
                 ; 0000 0103         i=0;
0001a1 2444      	CLR  R4
0001a2 2455      	CLR  R5
                 ; 0000 0104         j++;
0001a3 01f3      	MOVW R30,R6
0001a4 9631      	ADIW R30,1
0001a5 013f      	MOVW R6,R30
0001a6 9731      	SBIW R30,1
                 ; 0000 0105         }
                 ; 0000 0106 
                 ; 0000 0107         if(i==16 && j==1){
                 _0x1A:
0001a7 e1e0      	LDI  R30,LOW(16)
0001a8 e0f0      	LDI  R31,HIGH(16)
0001a9 15e4      	CP   R30,R4
0001aa 05f5      	CPC  R31,R5
0001ab f429      	BRNE _0x1E
0001ac e0e1      	LDI  R30,LOW(1)
0001ad e0f0      	LDI  R31,HIGH(1)
0001ae 15e6      	CP   R30,R6
0001af 05f7      	CPC  R31,R7
0001b0 f009      	BREQ _0x1F
                 _0x1E:
0001b1 c004      	RJMP _0x1D
                 _0x1F:
                 ; 0000 0108            i=0;
0001b2 2444      	CLR  R4
0001b3 2455      	CLR  R5
                 ; 0000 0109            j=0;
0001b4 2466      	CLR  R6
0001b5 2477      	CLR  R7
                 ; 0000 010A       }
                 ; 0000 010B 
                 ; 0000 010C }
                 _0x1D:
0001b6 c083      	RJMP _0x2080004
                 ; .FEND
                 
                 	.DSEG
                 _0x14:
000175           	.BYTE 0x9
                 ;
                 ;int keypad(void){
                 ; 0000 010E int keypad(void){
                 
                 	.CSEG
                 _keypad:
                 ; .FSTART _keypad
                 ; 0000 010F     //column 1
                 ; 0000 0110     int b=100;
                 ; 0000 0111     PORTA.3=0;
0001b7 931a      	ST   -Y,R17
0001b8 930a      	ST   -Y,R16
                 ;	b -> R16,R17
                +
0001b9 e604     +LDI R16 , LOW ( 100 )
0001ba e010     +LDI R17 , HIGH ( 100 )
                 	__GETWRN 16,17,100
0001bb 98db      	CBI  0x1B,3
                 ; 0000 0112     PORTA.2=1;
0001bc 9ada      	SBI  0x1B,2
                 ; 0000 0113     PORTA.1=1;
0001bd 9ad9      	SBI  0x1B,1
                 ; 0000 0114     PORTA.0=1;
0001be 9ad8      	SBI  0x1B,0
                 ; 0000 0115     //row 4 ->0
                 ; 0000 0116     if(PINA.4==0){
0001bf 99cc      	SBIC 0x19,4
0001c0 c002      	RJMP _0x28
                 ; 0000 0117         b=15;
                +
0001c1 e00f     +LDI R16 , LOW ( 15 )
0001c2 e010     +LDI R17 , HIGH ( 15 )
                 	__GETWRN 16,17,15
                 ; 0000 0118     }
                 ; 0000 0119     //row 3 ->7
                 ; 0000 011A     if(PINA.5==0){
                 _0x28:
0001c3 99cd      	SBIC 0x19,5
0001c4 c002      	RJMP _0x29
                 ; 0000 011B         b=7;
                +
0001c5 e007     +LDI R16 , LOW ( 7 )
0001c6 e010     +LDI R17 , HIGH ( 7 )
                 	__GETWRN 16,17,7
                 ; 0000 011C     }
                 ; 0000 011D     //row2 -> 4
                 ; 0000 011E     if(PINA.6==0){
                 _0x29:
0001c7 99ce      	SBIC 0x19,6
0001c8 c002      	RJMP _0x2A
                 ; 0000 011F         b=4;
                +
0001c9 e004     +LDI R16 , LOW ( 4 )
0001ca e010     +LDI R17 , HIGH ( 4 )
                 	__GETWRN 16,17,4
                 ; 0000 0120     }
                 ; 0000 0121     //row1-> 1
                 ; 0000 0122     if(PINA.7==0){
                 _0x2A:
0001cb 99cf      	SBIC 0x19,7
0001cc c002      	RJMP _0x2B
                 ; 0000 0123         b=1;
                +
0001cd e001     +LDI R16 , LOW ( 1 )
0001ce e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
                 ; 0000 0124     }
                 ; 0000 0125 
                 ; 0000 0126 
                 ; 0000 0127      //column 2
                 ; 0000 0128     PORTA.3=1;
                 _0x2B:
0001cf 9adb      	SBI  0x1B,3
                 ; 0000 0129     PORTA.2=0;
0001d0 98da      	CBI  0x1B,2
                 ; 0000 012A     PORTA.1=1;
0001d1 9ad9      	SBI  0x1B,1
                 ; 0000 012B     PORTA.0=1;
0001d2 9ad8      	SBI  0x1B,0
                 ; 0000 012C     //row 4 ->F
                 ; 0000 012D     if(PINA.4==0){
0001d3 99cc      	SBIC 0x19,4
0001d4 c002      	RJMP _0x34
                 ; 0000 012E         b=0;
                +
0001d5 e000     +LDI R16 , LOW ( 0 )
0001d6 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 ; 0000 012F     }
                 ; 0000 0130     //row 3 ->8
                 ; 0000 0131     if(PINA.5==0){
                 _0x34:
0001d7 99cd      	SBIC 0x19,5
0001d8 c002      	RJMP _0x35
                 ; 0000 0132         b=8;
                +
0001d9 e008     +LDI R16 , LOW ( 8 )
0001da e010     +LDI R17 , HIGH ( 8 )
                 	__GETWRN 16,17,8
                 ; 0000 0133     }
                 ; 0000 0134     //row2 -> 5
                 ; 0000 0135     if(PINA.6==0){
                 _0x35:
0001db 99ce      	SBIC 0x19,6
0001dc c002      	RJMP _0x36
                 ; 0000 0136         b=5;
                +
0001dd e005     +LDI R16 , LOW ( 5 )
0001de e010     +LDI R17 , HIGH ( 5 )
                 	__GETWRN 16,17,5
                 ; 0000 0137     }
                 ; 0000 0138     //row1-> 2
                 ; 0000 0139     if(PINA.7==0){
                 _0x36:
0001df 99cf      	SBIC 0x19,7
0001e0 c002      	RJMP _0x37
                 ; 0000 013A         b=2;
                +
0001e1 e002     +LDI R16 , LOW ( 2 )
0001e2 e010     +LDI R17 , HIGH ( 2 )
                 	__GETWRN 16,17,2
                 ; 0000 013B     }
                 ; 0000 013C 
                 ; 0000 013D 
                 ; 0000 013E 
                 ; 0000 013F      //column 3
                 ; 0000 0140     PORTA.3=1;
                 _0x37:
0001e3 9adb      	SBI  0x1B,3
                 ; 0000 0141     PORTA.2=1;
0001e4 9ada      	SBI  0x1B,2
                 ; 0000 0142     PORTA.1=0;
0001e5 98d9      	CBI  0x1B,1
                 ; 0000 0143     PORTA.0=1;
0001e6 9ad8      	SBI  0x1B,0
                 ; 0000 0144     //row 4 ->E
                 ; 0000 0145     if(PINA.4==0){
0001e7 99cc      	SBIC 0x19,4
0001e8 c002      	RJMP _0x40
                 ; 0000 0146         b=14;
                +
0001e9 e00e     +LDI R16 , LOW ( 14 )
0001ea e010     +LDI R17 , HIGH ( 14 )
                 	__GETWRN 16,17,14
                 ; 0000 0147     }
                 ; 0000 0148     //row 3 ->9
                 ; 0000 0149     if(PINA.5==0){
                 _0x40:
0001eb 99cd      	SBIC 0x19,5
0001ec c002      	RJMP _0x41
                 ; 0000 014A         b=9;
                +
0001ed e009     +LDI R16 , LOW ( 9 )
0001ee e010     +LDI R17 , HIGH ( 9 )
                 	__GETWRN 16,17,9
                 ; 0000 014B     }
                 ; 0000 014C     //row2 -> 6
                 ; 0000 014D     if(PINA.6==0){
                 _0x41:
0001ef 99ce      	SBIC 0x19,6
0001f0 c002      	RJMP _0x42
                 ; 0000 014E         b=6;
                +
0001f1 e006     +LDI R16 , LOW ( 6 )
0001f2 e010     +LDI R17 , HIGH ( 6 )
                 	__GETWRN 16,17,6
                 ; 0000 014F     }
                 ; 0000 0150     //row1-> 3
                 ; 0000 0151     if(PINA.7==0){
                 _0x42:
0001f3 99cf      	SBIC 0x19,7
0001f4 c002      	RJMP _0x43
                 ; 0000 0152         b=3;
                +
0001f5 e003     +LDI R16 , LOW ( 3 )
0001f6 e010     +LDI R17 , HIGH ( 3 )
                 	__GETWRN 16,17,3
                 ; 0000 0153     }
                 ; 0000 0154 
                 ; 0000 0155 
                 ; 0000 0156      //column 4
                 ; 0000 0157     PORTA.3=1;
                 _0x43:
0001f7 9adb      	SBI  0x1B,3
                 ; 0000 0158     PORTA.2=1;
0001f8 9ada      	SBI  0x1B,2
                 ; 0000 0159     PORTA.1=1;
0001f9 9ad9      	SBI  0x1B,1
                 ; 0000 015A     PORTA.0=0;
0001fa 98d8      	CBI  0x1B,0
                 ; 0000 015B     //row 4 ->D
                 ; 0000 015C     if(PINA.4==0){
0001fb 99cc      	SBIC 0x19,4
0001fc c002      	RJMP _0x4C
                 ; 0000 015D         b=13;
                +
0001fd e00d     +LDI R16 , LOW ( 13 )
0001fe e010     +LDI R17 , HIGH ( 13 )
                 	__GETWRN 16,17,13
                 ; 0000 015E     }
                 ; 0000 015F     //row 3 ->C
                 ; 0000 0160     if(PINA.5==0){
                 _0x4C:
0001ff 99cd      	SBIC 0x19,5
000200 c002      	RJMP _0x4D
                 ; 0000 0161         b=12;
                +
000201 e00c     +LDI R16 , LOW ( 12 )
000202 e010     +LDI R17 , HIGH ( 12 )
                 	__GETWRN 16,17,12
                 ; 0000 0162     }
                 ; 0000 0163     //row2 -> B
                 ; 0000 0164     if(PINA.6==0){
                 _0x4D:
000203 99ce      	SBIC 0x19,6
000204 c002      	RJMP _0x4E
                 ; 0000 0165         b=11;
                +
000205 e00b     +LDI R16 , LOW ( 11 )
000206 e010     +LDI R17 , HIGH ( 11 )
                 	__GETWRN 16,17,11
                 ; 0000 0166     }
                 ; 0000 0167     //row1-> A
                 ; 0000 0168     if(PINA.7==0){
                 _0x4E:
000207 99cf      	SBIC 0x19,7
000208 c002      	RJMP _0x4F
                 ; 0000 0169         b=10;
                +
000209 e00a     +LDI R16 , LOW ( 10 )
00020a e010     +LDI R17 , HIGH ( 10 )
                 	__GETWRN 16,17,10
                 ; 0000 016A     }
                 ; 0000 016B 
                 ; 0000 016C     return b;
                 _0x4F:
00020b 01f8      	MOVW R30,R16
00020c 9109      	LD   R16,Y+
00020d 9119      	LD   R17,Y+
00020e 9508      	RET
                 ; 0000 016D }
                 ; .FEND
                 ;
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00020f 93aa      	ST   -Y,R26
000210 b3e2      	IN   R30,0x12
000211 70ef      	ANDI R30,LOW(0xF)
000212 2fae      	MOV  R26,R30
000213 81e8      	LD   R30,Y
000214 7fe0      	ANDI R30,LOW(0xF0)
000215 2bea      	OR   R30,R26
000216 bbe2      	OUT  0x12,R30
                +
000217 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000218 958a     +DEC R24
000219 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00021a 9a92      	SBI  0x12,2
                +
00021b e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
00021c 958a     +DEC R24
00021d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
00021e 9892      	CBI  0x12,2
                +
00021f e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
000220 958a     +DEC R24
000221 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
000222 c088      	RJMP _0x2080002
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000223 93aa      	ST   -Y,R26
000224 81a8      	LD   R26,Y
000225 dfe9      	RCALL __lcd_write_nibble_G100
000226 81e8          ld    r30,y
000227 95e2          swap  r30
000228 83e8          st    y,r30
000229 81a8      	LD   R26,Y
00022a dfe4      	RCALL __lcd_write_nibble_G100
                +
00022b e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
00022c 958a     +DEC R24
00022d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
00022e c07c      	RJMP _0x2080002
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00022f 93aa      	ST   -Y,R26
000230 81e8      	LD   R30,Y
000231 e0f0      	LDI  R31,0
000232 53ec      	SUBI R30,LOW(-__base_y_G100)
000233 4ffe      	SBCI R31,HIGH(-__base_y_G100)
000234 81e0      	LD   R30,Z
000235 81a9      	LDD  R26,Y+1
000236 0fae      	ADD  R26,R30
000237 dfeb      	RCALL __lcd_write_data
000238 8099      	LDD  R9,Y+1
000239 8088      	LDD  R8,Y+0
                 _0x2080004:
00023a 9622      	ADIW R28,2
00023b 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00023c e0a2      	LDI  R26,LOW(2)
00023d 940e 04af 	CALL SUBOPT_0x3
00023f e0ac      	LDI  R26,LOW(12)
000240 dfe2      	RCALL __lcd_write_data
000241 e0a1      	LDI  R26,LOW(1)
000242 940e 04af 	CALL SUBOPT_0x3
000244 e0e0      	LDI  R30,LOW(0)
000245 2e8e      	MOV  R8,R30
000246 2e9e      	MOV  R9,R30
000247 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000248 93aa      	ST   -Y,R26
000249 81a8      	LD   R26,Y
00024a 30aa      	CPI  R26,LOW(0xA)
00024b f011      	BREQ _0x2000005
00024c 149b      	CP   R9,R11
00024d f048      	BRLO _0x2000004
                 _0x2000005:
00024e e0e0      	LDI  R30,LOW(0)
00024f 93ea      	ST   -Y,R30
000250 9483      	INC  R8
000251 2da8      	MOV  R26,R8
000252 dfdc      	RCALL _lcd_gotoxy
000253 81a8      	LD   R26,Y
000254 30aa      	CPI  R26,LOW(0xA)
000255 f409      	BRNE _0x2000007
000256 c054      	RJMP _0x2080002
                 _0x2000007:
                 _0x2000004:
000257 9493      	INC  R9
000258 9a90      	SBI  0x12,0
000259 81a8      	LD   R26,Y
00025a dfc8      	RCALL __lcd_write_data
00025b 9890      	CBI  0x12,0
00025c c04e      	RJMP _0x2080002
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00025d 93ba      	ST   -Y,R27
00025e 93aa      	ST   -Y,R26
00025f 931a      	ST   -Y,R17
                 _0x2000008:
000260 81a9      	LDD  R26,Y+1
000261 81ba      	LDD  R27,Y+1+1
000262 91ed      	LD   R30,X+
000263 83a9      	STD  Y+1,R26
000264 83ba      	STD  Y+1+1,R27
000265 2f1e      	MOV  R17,R30
000266 30e0      	CPI  R30,0
000267 f019      	BREQ _0x200000A
000268 2fa1      	MOV  R26,R17
000269 dfde      	RCALL _lcd_putchar
00026a cff5      	RJMP _0x2000008
                 _0x200000A:
00026b c010      	RJMP _0x2080003
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00026c 93ba      	ST   -Y,R27
00026d 93aa      	ST   -Y,R26
00026e 931a      	ST   -Y,R17
                 _0x200000B:
00026f 81e9      	LDD  R30,Y+1
000270 81fa      	LDD  R31,Y+1+1
000271 9631      	ADIW R30,1
000272 83e9      	STD  Y+1,R30
000273 83fa      	STD  Y+1+1,R31
000274 9731      	SBIW R30,1
000275 91e4      	LPM  R30,Z
000276 2f1e      	MOV  R17,R30
000277 30e0      	CPI  R30,0
000278 f019      	BREQ _0x200000D
000279 2fa1      	MOV  R26,R17
00027a dfcd      	RCALL _lcd_putchar
00027b cff3      	RJMP _0x200000B
                 _0x200000D:
                 _0x2080003:
00027c 8118      	LDD  R17,Y+0
00027d 9623      	ADIW R28,3
00027e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00027f 93aa      	ST   -Y,R26
000280 b3e1      	IN   R30,0x11
000281 6fe0      	ORI  R30,LOW(0xF0)
000282 bbe1      	OUT  0x11,R30
000283 9a8a      	SBI  0x11,2
000284 9a88      	SBI  0x11,0
000285 9a89      	SBI  0x11,1
000286 9892      	CBI  0x12,2
000287 9890      	CBI  0x12,0
000288 9891      	CBI  0x12,1
000289 80b8      	LDD  R11,Y+0
00028a 81e8      	LD   R30,Y
00028b 58e0      	SUBI R30,-LOW(128)
                +
00028c 93e0 01c6+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00028e 81e8      	LD   R30,Y
00028f 54e0      	SUBI R30,-LOW(192)
                +
000290 93e0 01c7+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000292 e1a4      	LDI  R26,LOW(20)
000293 e0b0      	LDI  R27,0
000294 940e 04e9 	CALL _delay_ms
000296 940e 04b5 	CALL SUBOPT_0x4
000298 940e 04b5 	CALL SUBOPT_0x4
00029a 940e 04b5 	CALL SUBOPT_0x4
00029c e2a0      	LDI  R26,LOW(32)
00029d df71      	RCALL __lcd_write_nibble_G100
                +
00029e ec88     +LDI R24 , LOW ( 200 )
00029f e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0002a0 9701     +SBIW R24 , 1
0002a1 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0002a2 e2a8      	LDI  R26,LOW(40)
0002a3 df7f      	RCALL __lcd_write_data
0002a4 e0a4      	LDI  R26,LOW(4)
0002a5 df7d      	RCALL __lcd_write_data
0002a6 e8a5      	LDI  R26,LOW(133)
0002a7 df7b      	RCALL __lcd_write_data
0002a8 e0a6      	LDI  R26,LOW(6)
0002a9 df79      	RCALL __lcd_write_data
0002aa df91      	RCALL _lcd_clear
                 _0x2080002:
0002ab 9621      	ADIW R28,1
0002ac 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G101:
                 ; .FSTART _put_buff_G101
0002ad 93ba      	ST   -Y,R27
0002ae 93aa      	ST   -Y,R26
0002af 931a      	ST   -Y,R17
0002b0 930a      	ST   -Y,R16
0002b1 81aa      	LDD  R26,Y+2
0002b2 81bb      	LDD  R27,Y+2+1
0002b3 9612      	ADIW R26,2
0002b4 940e 0530 	CALL __GETW1P
0002b6 9730      	SBIW R30,0
0002b7 f159      	BREQ _0x2020010
0002b8 81aa      	LDD  R26,Y+2
0002b9 81bb      	LDD  R27,Y+2+1
0002ba 9614      	ADIW R26,4
0002bb 940e 0530 	CALL __GETW1P
0002bd 018f      	MOVW R16,R30
0002be 9730      	SBIW R30,0
0002bf f061      	BREQ _0x2020012
                +
0002c0 3002     +CPI R16 , LOW ( 2 )
0002c1 e0e0     +LDI R30 , HIGH ( 2 )
0002c2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
0002c3 f098      	BRLO _0x2020013
0002c4 01f8      	MOVW R30,R16
0002c5 9731      	SBIW R30,1
0002c6 018f      	MOVW R16,R30
                +
0002c7 81aa     +LDD R26 , Y + 2
0002c8 81bb     +LDD R27 , Y + 2 + 1
0002c9 9614     +ADIW R26 , 4
0002ca 93ed     +ST X + , R30
0002cb 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2020012:
0002cc 81aa      	LDD  R26,Y+2
0002cd 81bb      	LDD  R27,Y+2+1
0002ce 9612      	ADIW R26,2
0002cf 91ed      	LD   R30,X+
0002d0 91fd      	LD   R31,X+
0002d1 9631      	ADIW R30,1
0002d2 93fe      	ST   -X,R31
0002d3 93ee      	ST   -X,R30
0002d4 9731      	SBIW R30,1
0002d5 81ac      	LDD  R26,Y+4
0002d6 83a0      	STD  Z+0,R26
                 _0x2020013:
0002d7 81aa      	LDD  R26,Y+2
0002d8 81bb      	LDD  R27,Y+2+1
0002d9 940e 0530 	CALL __GETW1P
0002db 23ff      	TST  R31
0002dc f02a      	BRMI _0x2020014
0002dd 91ed      	LD   R30,X+
0002de 91fd      	LD   R31,X+
0002df 9631      	ADIW R30,1
0002e0 93fe      	ST   -X,R31
0002e1 93ee      	ST   -X,R30
                 _0x2020014:
0002e2 c006      	RJMP _0x2020015
                 _0x2020010:
0002e3 81aa      	LDD  R26,Y+2
0002e4 81bb      	LDD  R27,Y+2+1
0002e5 efef      	LDI  R30,LOW(65535)
0002e6 efff      	LDI  R31,HIGH(65535)
0002e7 93ed      	ST   X+,R30
0002e8 93fc      	ST   X,R31
                 _0x2020015:
0002e9 8119      	LDD  R17,Y+1
0002ea 8108      	LDD  R16,Y+0
0002eb 9625      	ADIW R28,5
0002ec 9508      	RET
                 ; .FEND
                 __print_G101:
                 ; .FSTART __print_G101
0002ed 93ba      	ST   -Y,R27
0002ee 93aa      	ST   -Y,R26
0002ef 9726      	SBIW R28,6
0002f0 940e 053d 	CALL __SAVELOCR6
0002f2 e010      	LDI  R17,0
0002f3 85ac      	LDD  R26,Y+12
0002f4 85bd      	LDD  R27,Y+12+1
0002f5 e0e0      	LDI  R30,LOW(0)
0002f6 e0f0      	LDI  R31,HIGH(0)
0002f7 93ed      	ST   X+,R30
0002f8 93fc      	ST   X,R31
                 _0x2020016:
0002f9 89ea      	LDD  R30,Y+18
0002fa 89fb      	LDD  R31,Y+18+1
0002fb 9631      	ADIW R30,1
0002fc 8bea      	STD  Y+18,R30
0002fd 8bfb      	STD  Y+18+1,R31
0002fe 9731      	SBIW R30,1
0002ff 91e4      	LPM  R30,Z
000300 2f2e      	MOV  R18,R30
000301 30e0      	CPI  R30,0
000302 f409      	BRNE PC+2
000303 c115      	RJMP _0x2020018
000304 2fe1      	MOV  R30,R17
000305 30e0      	CPI  R30,0
000306 f439      	BRNE _0x202001C
000307 3225      	CPI  R18,37
000308 f411      	BRNE _0x202001D
000309 e011      	LDI  R17,LOW(1)
00030a c002      	RJMP _0x202001E
                 _0x202001D:
00030b 940e 04bd 	CALL SUBOPT_0x5
                 _0x202001E:
00030d c10a      	RJMP _0x202001B
                 _0x202001C:
00030e 30e1      	CPI  R30,LOW(0x1)
00030f f4a9      	BRNE _0x202001F
000310 3225      	CPI  R18,37
000311 f419      	BRNE _0x2020020
000312 940e 04bd 	CALL SUBOPT_0x5
000314 c102      	RJMP _0x20200CC
                 _0x2020020:
000315 e012      	LDI  R17,LOW(2)
000316 e040      	LDI  R20,LOW(0)
000317 e000      	LDI  R16,LOW(0)
000318 322d      	CPI  R18,45
000319 f411      	BRNE _0x2020021
00031a e001      	LDI  R16,LOW(1)
00031b c0fc      	RJMP _0x202001B
                 _0x2020021:
00031c 322b      	CPI  R18,43
00031d f411      	BRNE _0x2020022
00031e e24b      	LDI  R20,LOW(43)
00031f c0f8      	RJMP _0x202001B
                 _0x2020022:
000320 3220      	CPI  R18,32
000321 f411      	BRNE _0x2020023
000322 e240      	LDI  R20,LOW(32)
000323 c0f4      	RJMP _0x202001B
                 _0x2020023:
000324 c002      	RJMP _0x2020024
                 _0x202001F:
000325 30e2      	CPI  R30,LOW(0x2)
000326 f439      	BRNE _0x2020025
                 _0x2020024:
000327 e050      	LDI  R21,LOW(0)
000328 e013      	LDI  R17,LOW(3)
000329 3320      	CPI  R18,48
00032a f411      	BRNE _0x2020026
00032b 6800      	ORI  R16,LOW(128)
00032c c0eb      	RJMP _0x202001B
                 _0x2020026:
00032d c003      	RJMP _0x2020027
                 _0x2020025:
00032e 30e3      	CPI  R30,LOW(0x3)
00032f f009      	BREQ PC+2
000330 c0e7      	RJMP _0x202001B
                 _0x2020027:
000331 3320      	CPI  R18,48
000332 f010      	BRLO _0x202002A
000333 332a      	CPI  R18,58
000334 f008      	BRLO _0x202002B
                 _0x202002A:
000335 c007      	RJMP _0x2020029
                 _0x202002B:
000336 e0aa      	LDI  R26,LOW(10)
000337 9f5a      	MUL  R21,R26
000338 2d50      	MOV  R21,R0
000339 2fe2      	MOV  R30,R18
00033a 53e0      	SUBI R30,LOW(48)
00033b 0f5e      	ADD  R21,R30
00033c c0db      	RJMP _0x202001B
                 _0x2020029:
00033d 2fe2      	MOV  R30,R18
00033e 36e3      	CPI  R30,LOW(0x63)
00033f f449      	BRNE _0x202002F
000340 940e 04c4 	CALL SUBOPT_0x6
000342 89e8      	LDD  R30,Y+16
000343 89f9      	LDD  R31,Y+16+1
000344 81a4      	LDD  R26,Z+4
000345 93aa      	ST   -Y,R26
000346 940e 04ca 	CALL SUBOPT_0x7
000348 c0ce      	RJMP _0x2020030
                 _0x202002F:
000349 37e3      	CPI  R30,LOW(0x73)
00034a f441      	BRNE _0x2020032
00034b 940e 04c4 	CALL SUBOPT_0x6
00034d 940e 04d0 	CALL SUBOPT_0x8
00034f 940e 0487 	CALL _strlen
000351 2f1e      	MOV  R17,R30
000352 c00a      	RJMP _0x2020033
                 _0x2020032:
000353 37e0      	CPI  R30,LOW(0x70)
000354 f461      	BRNE _0x2020035
000355 940e 04c4 	CALL SUBOPT_0x6
000357 940e 04d0 	CALL SUBOPT_0x8
000359 940e 0493 	CALL _strlenf
00035b 2f1e      	MOV  R17,R30
00035c 6008      	ORI  R16,LOW(8)
                 _0x2020033:
00035d 6002      	ORI  R16,LOW(2)
00035e 770f      	ANDI R16,LOW(127)
00035f e030      	LDI  R19,LOW(0)
000360 c034      	RJMP _0x2020036
                 _0x2020035:
000361 36e4      	CPI  R30,LOW(0x64)
000362 f011      	BREQ _0x2020039
000363 36e9      	CPI  R30,LOW(0x69)
000364 f411      	BRNE _0x202003A
                 _0x2020039:
000365 6004      	ORI  R16,LOW(4)
000366 c002      	RJMP _0x202003B
                 _0x202003A:
000367 37e5      	CPI  R30,LOW(0x75)
000368 f431      	BRNE _0x202003C
                 _0x202003B:
000369 e5e4      	LDI  R30,LOW(_tbl10_G101*2)
00036a e0f0      	LDI  R31,HIGH(_tbl10_G101*2)
00036b 83ee      	STD  Y+6,R30
00036c 83ff      	STD  Y+6+1,R31
00036d e015      	LDI  R17,LOW(5)
00036e c00c      	RJMP _0x202003D
                 _0x202003C:
00036f 35e8      	CPI  R30,LOW(0x58)
000370 f411      	BRNE _0x202003F
000371 6008      	ORI  R16,LOW(8)
000372 c003      	RJMP _0x2020040
                 _0x202003F:
000373 37e8      	CPI  R30,LOW(0x78)
000374 f009      	BREQ PC+2
000375 c0a1      	RJMP _0x2020071
                 _0x2020040:
000376 e5ee      	LDI  R30,LOW(_tbl16_G101*2)
000377 e0f0      	LDI  R31,HIGH(_tbl16_G101*2)
000378 83ee      	STD  Y+6,R30
000379 83ff      	STD  Y+6+1,R31
00037a e014      	LDI  R17,LOW(4)
                 _0x202003D:
00037b ff02      	SBRS R16,2
00037c c014      	RJMP _0x2020042
00037d 940e 04c4 	CALL SUBOPT_0x6
00037f 940e 04da 	CALL SUBOPT_0x9
000381 85ab      	LDD  R26,Y+11
000382 23aa      	TST  R26
000383 f43a      	BRPL _0x2020043
000384 85ea      	LDD  R30,Y+10
000385 85fb      	LDD  R31,Y+10+1
000386 940e 04f7 	CALL __ANEGW1
000388 87ea      	STD  Y+10,R30
000389 87fb      	STD  Y+10+1,R31
00038a e24d      	LDI  R20,LOW(45)
                 _0x2020043:
00038b 3040      	CPI  R20,0
00038c f011      	BREQ _0x2020044
00038d 5f1f      	SUBI R17,-LOW(1)
00038e c001      	RJMP _0x2020045
                 _0x2020044:
00038f 7f0b      	ANDI R16,LOW(251)
                 _0x2020045:
000390 c004      	RJMP _0x2020046
                 _0x2020042:
000391 940e 04c4 	CALL SUBOPT_0x6
000393 940e 04da 	CALL SUBOPT_0x9
                 _0x2020046:
                 _0x2020036:
000395 fd00      	SBRC R16,0
000396 c011      	RJMP _0x2020047
                 _0x2020048:
000397 1715      	CP   R17,R21
000398 f478      	BRSH _0x202004A
000399 ff07      	SBRS R16,7
00039a c008      	RJMP _0x202004B
00039b ff02      	SBRS R16,2
00039c c004      	RJMP _0x202004C
00039d 7f0b      	ANDI R16,LOW(251)
00039e 2f24      	MOV  R18,R20
00039f 5011      	SUBI R17,LOW(1)
0003a0 c001      	RJMP _0x202004D
                 _0x202004C:
0003a1 e320      	LDI  R18,LOW(48)
                 _0x202004D:
0003a2 c001      	RJMP _0x202004E
                 _0x202004B:
0003a3 e220      	LDI  R18,LOW(32)
                 _0x202004E:
0003a4 940e 04bd 	CALL SUBOPT_0x5
0003a6 5051      	SUBI R21,LOW(1)
0003a7 cfef      	RJMP _0x2020048
                 _0x202004A:
                 _0x2020047:
0003a8 2f31      	MOV  R19,R17
0003a9 ff01      	SBRS R16,1
0003aa c017      	RJMP _0x202004F
                 _0x2020050:
0003ab 3030      	CPI  R19,0
0003ac f0a1      	BREQ _0x2020052
0003ad ff03      	SBRS R16,3
0003ae c006      	RJMP _0x2020053
0003af 81ee      	LDD  R30,Y+6
0003b0 81ff      	LDD  R31,Y+6+1
0003b1 9125      	LPM  R18,Z+
0003b2 83ee      	STD  Y+6,R30
0003b3 83ff      	STD  Y+6+1,R31
0003b4 c005      	RJMP _0x2020054
                 _0x2020053:
0003b5 81ae      	LDD  R26,Y+6
0003b6 81bf      	LDD  R27,Y+6+1
0003b7 912d      	LD   R18,X+
0003b8 83ae      	STD  Y+6,R26
0003b9 83bf      	STD  Y+6+1,R27
                 _0x2020054:
0003ba 940e 04bd 	CALL SUBOPT_0x5
0003bc 3050      	CPI  R21,0
0003bd f009      	BREQ _0x2020055
0003be 5051      	SUBI R21,LOW(1)
                 _0x2020055:
0003bf 5031      	SUBI R19,LOW(1)
0003c0 cfea      	RJMP _0x2020050
                 _0x2020052:
0003c1 c04b      	RJMP _0x2020056
                 _0x202004F:
                 _0x2020058:
0003c2 e320      	LDI  R18,LOW(48)
0003c3 81ee      	LDD  R30,Y+6
0003c4 81ff      	LDD  R31,Y+6+1
0003c5 940e 0534 	CALL __GETW1PF
0003c7 87e8      	STD  Y+8,R30
0003c8 87f9      	STD  Y+8+1,R31
0003c9 81ee      	LDD  R30,Y+6
0003ca 81ff      	LDD  R31,Y+6+1
0003cb 9632      	ADIW R30,2
0003cc 83ee      	STD  Y+6,R30
0003cd 83ff      	STD  Y+6+1,R31
                 _0x202005A:
0003ce 85e8      	LDD  R30,Y+8
0003cf 85f9      	LDD  R31,Y+8+1
0003d0 85aa      	LDD  R26,Y+10
0003d1 85bb      	LDD  R27,Y+10+1
0003d2 17ae      	CP   R26,R30
0003d3 07bf      	CPC  R27,R31
0003d4 f050      	BRLO _0x202005C
0003d5 5f2f      	SUBI R18,-LOW(1)
0003d6 85a8      	LDD  R26,Y+8
0003d7 85b9      	LDD  R27,Y+8+1
0003d8 85ea      	LDD  R30,Y+10
0003d9 85fb      	LDD  R31,Y+10+1
0003da 1bea      	SUB  R30,R26
0003db 0bfb      	SBC  R31,R27
0003dc 87ea      	STD  Y+10,R30
0003dd 87fb      	STD  Y+10+1,R31
0003de cfef      	RJMP _0x202005A
                 _0x202005C:
0003df 332a      	CPI  R18,58
0003e0 f028      	BRLO _0x202005D
0003e1 ff03      	SBRS R16,3
0003e2 c002      	RJMP _0x202005E
0003e3 5f29      	SUBI R18,-LOW(7)
0003e4 c001      	RJMP _0x202005F
                 _0x202005E:
0003e5 5d29      	SUBI R18,-LOW(39)
                 _0x202005F:
                 _0x202005D:
0003e6 fd04      	SBRC R16,4
0003e7 c01a      	RJMP _0x2020061
0003e8 3321      	CPI  R18,49
0003e9 f420      	BRSH _0x2020063
0003ea 85a8      	LDD  R26,Y+8
0003eb 85b9      	LDD  R27,Y+8+1
0003ec 9711      	SBIW R26,1
0003ed f409      	BRNE _0x2020062
                 _0x2020063:
0003ee c009      	RJMP _0x20200CD
                 _0x2020062:
0003ef 1753      	CP   R21,R19
0003f0 f010      	BRLO _0x2020067
0003f1 ff00      	SBRS R16,0
0003f2 c001      	RJMP _0x2020068
                 _0x2020067:
0003f3 c013      	RJMP _0x2020066
                 _0x2020068:
0003f4 e220      	LDI  R18,LOW(32)
0003f5 ff07      	SBRS R16,7
0003f6 c00b      	RJMP _0x2020069
0003f7 e320      	LDI  R18,LOW(48)
                 _0x20200CD:
0003f8 6100      	ORI  R16,LOW(16)
0003f9 ff02      	SBRS R16,2
0003fa c007      	RJMP _0x202006A
0003fb 7f0b      	ANDI R16,LOW(251)
0003fc 934a      	ST   -Y,R20
0003fd 940e 04ca 	CALL SUBOPT_0x7
0003ff 3050      	CPI  R21,0
000400 f009      	BREQ _0x202006B
000401 5051      	SUBI R21,LOW(1)
                 _0x202006B:
                 _0x202006A:
                 _0x2020069:
                 _0x2020061:
000402 940e 04bd 	CALL SUBOPT_0x5
000404 3050      	CPI  R21,0
000405 f009      	BREQ _0x202006C
000406 5051      	SUBI R21,LOW(1)
                 _0x202006C:
                 _0x2020066:
000407 5031      	SUBI R19,LOW(1)
000408 85a8      	LDD  R26,Y+8
000409 85b9      	LDD  R27,Y+8+1
00040a 9712      	SBIW R26,2
00040b f008      	BRLO _0x2020059
00040c cfb5      	RJMP _0x2020058
                 _0x2020059:
                 _0x2020056:
00040d ff00      	SBRS R16,0
00040e c008      	RJMP _0x202006D
                 _0x202006E:
00040f 3050      	CPI  R21,0
000410 f031      	BREQ _0x2020070
000411 5051      	SUBI R21,LOW(1)
000412 e2e0      	LDI  R30,LOW(32)
000413 93ea      	ST   -Y,R30
000414 940e 04ca 	CALL SUBOPT_0x7
000416 cff8      	RJMP _0x202006E
                 _0x2020070:
                 _0x202006D:
                 _0x2020071:
                 _0x2020030:
                 _0x20200CC:
000417 e010      	LDI  R17,LOW(0)
                 _0x202001B:
000418 cee0      	RJMP _0x2020016
                 _0x2020018:
000419 85ac      	LDD  R26,Y+12
00041a 85bd      	LDD  R27,Y+12+1
00041b 940e 0530 	CALL __GETW1P
00041d 940e 0544 	CALL __LOADLOCR6
00041f 9664      	ADIW R28,20
000420 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
000421 92ff      	PUSH R15
000422 2ef8      	MOV  R15,R24
000423 9726      	SBIW R28,6
000424 940e 053f 	CALL __SAVELOCR4
000426 940e 04e2 	CALL SUBOPT_0xA
000428 9730      	SBIW R30,0
000429 f419      	BRNE _0x2020072
00042a efef      	LDI  R30,LOW(65535)
00042b efff      	LDI  R31,HIGH(65535)
00042c c023      	RJMP _0x2080001
                 _0x2020072:
00042d 01de      	MOVW R26,R28
00042e 9616      	ADIW R26,6
00042f 940e 04f3 	CALL __ADDW2R15
000431 018d      	MOVW R16,R26
000432 940e 04e2 	CALL SUBOPT_0xA
000434 83ee      	STD  Y+6,R30
000435 83ff      	STD  Y+6+1,R31
000436 e0e0      	LDI  R30,LOW(0)
000437 87e8      	STD  Y+8,R30
000438 87e9      	STD  Y+8+1,R30
000439 01de      	MOVW R26,R28
00043a 961a      	ADIW R26,10
00043b 940e 04f3 	CALL __ADDW2R15
00043d 940e 0530 	CALL __GETW1P
00043f 93fa      	ST   -Y,R31
000440 93ea      	ST   -Y,R30
000441 931a      	ST   -Y,R17
000442 930a      	ST   -Y,R16
000443 eaed      	LDI  R30,LOW(_put_buff_G101)
000444 e0f2      	LDI  R31,HIGH(_put_buff_G101)
000445 93fa      	ST   -Y,R31
000446 93ea      	ST   -Y,R30
000447 01de      	MOVW R26,R28
000448 961a      	ADIW R26,10
000449 dea3      	RCALL __print_G101
00044a 019f      	MOVW R18,R30
00044b 81ae      	LDD  R26,Y+6
00044c 81bf      	LDD  R27,Y+6+1
00044d e0e0      	LDI  R30,LOW(0)
00044e 93ec      	ST   X,R30
00044f 01f9      	MOVW R30,R18
                 _0x2080001:
000450 940e 0546 	CALL __LOADLOCR4
000452 962a      	ADIW R28,10
000453 90ff      	POP  R15
000454 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcat:
                 ; .FSTART _strcat
000455 93ba      	ST   -Y,R27
000456 93aa      	ST   -Y,R26
000457 91e9          ld   r30,y+
000458 91f9          ld   r31,y+
000459 91a9          ld   r26,y+
00045a 91b9          ld   r27,y+
00045b 01cd          movw r24,r26
                 strcat0:
00045c 916d          ld   r22,x+
00045d 2366          tst  r22
00045e f7e9          brne strcat0
00045f 9711          sbiw r26,1
                 strcat1:
000460 9161          ld   r22,z+
000461 936d          st   x+,r22
000462 2366          tst  r22
000463 f7e1          brne strcat1
000464 01fc          movw r30,r24
000465 9508          ret
                 ; .FEND
                 _strcmp:
                 ; .FSTART _strcmp
000466 93ba      	ST   -Y,R27
000467 93aa      	ST   -Y,R26
000468 91e9          ld   r30,y+
000469 91f9          ld   r31,y+
00046a 91a9          ld   r26,y+
00046b 91b9          ld   r27,y+
                 strcmp0:
00046c 916d          ld   r22,x+
00046d 9171          ld   r23,z+
00046e 1767          cp   r22,r23
00046f f421          brne strcmp1
000470 2366          tst  r22
000471 f7d1          brne strcmp0
                 strcmp3:
000472 27ee          clr  r30
000473 9508          ret
                 strcmp1:
000474 1b67          sub  r22,r23
000475 f3e1          breq strcmp3
000476 e0e1          ldi  r30,1
000477 f408          brcc strcmp2
000478 50e2          subi r30,2
                 strcmp2:
000479 9508          ret
                 ; .FEND
                 _strcpy:
                 ; .FSTART _strcpy
00047a 93ba      	ST   -Y,R27
00047b 93aa      	ST   -Y,R26
00047c 91e9          ld   r30,y+
00047d 91f9          ld   r31,y+
00047e 91a9          ld   r26,y+
00047f 91b9          ld   r27,y+
000480 01cd          movw r24,r26
                 strcpy0:
000481 9161          ld   r22,z+
000482 936d          st   x+,r22
000483 2366          tst  r22
000484 f7e1          brne strcpy0
000485 01fc          movw r30,r24
000486 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000487 93ba      	ST   -Y,R27
000488 93aa      	ST   -Y,R26
000489 91a9          ld   r26,y+
00048a 91b9          ld   r27,y+
00048b 27ee          clr  r30
00048c 27ff          clr  r31
                 strlen0:
00048d 916d          ld   r22,x+
00048e 2366          tst  r22
00048f f011          breq strlen1
000490 9631          adiw r30,1
000491 cffb          rjmp strlen0
                 strlen1:
000492 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000493 93ba      	ST   -Y,R27
000494 93aa      	ST   -Y,R26
000495 27aa          clr  r26
000496 27bb          clr  r27
000497 91e9          ld   r30,y+
000498 91f9          ld   r31,y+
                 strlenf0:
000499 9005      	lpm  r0,z+
00049a 2000          tst  r0
00049b f011          breq strlenf1
00049c 9611          adiw r26,1
00049d cffb          rjmp strlenf0
                 strlenf1:
00049e 01fd          movw r30,r26
00049f 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 
                 	.DSEG
                 _str:
00017e           	.BYTE 0xA
                 _input_password:
000188           	.BYTE 0x1E
                 _password:
0001a6           	.BYTE 0x1E
                 __base_y_G100:
0001c4           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
0004a0 e8e8      	LDI  R30,LOW(_input_password)
0004a1 e0f1      	LDI  R31,HIGH(_input_password)
0004a2 93fa      	ST   -Y,R31
0004a3 93ea      	ST   -Y,R30
0004a4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1:
0004a5 01f2      	MOVW R30,R4
0004a6 9631      	ADIW R30,1
0004a7 012f      	MOVW R4,R30
0004a8 924a      	ST   -Y,R4
0004a9 2da6      	MOV  R26,R6
0004aa 940c 022f 	JMP  _lcd_gotoxy
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x2:
0004ac 940e 026c 	CALL _lcd_putsf
0004ae cff1      	RJMP SUBOPT_0x0
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0004af 940e 0223 	CALL __lcd_write_data
0004b1 e0a3      	LDI  R26,LOW(3)
0004b2 e0b0      	LDI  R27,0
0004b3 940c 04e9 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x4:
0004b5 e3a0      	LDI  R26,LOW(48)
0004b6 940e 020f 	CALL __lcd_write_nibble_G100
                +
0004b8 ec88     +LDI R24 , LOW ( 200 )
0004b9 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
0004ba 9701     +SBIW R24 , 1
0004bb f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
0004bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0004bd 932a      	ST   -Y,R18
0004be 85ad      	LDD  R26,Y+13
0004bf 85be      	LDD  R27,Y+13+1
0004c0 85ef      	LDD  R30,Y+15
0004c1 89f8      	LDD  R31,Y+15+1
0004c2 9509      	ICALL
0004c3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0004c4 89e8      	LDD  R30,Y+16
0004c5 89f9      	LDD  R31,Y+16+1
0004c6 9734      	SBIW R30,4
0004c7 8be8      	STD  Y+16,R30
0004c8 8bf9      	STD  Y+16+1,R31
0004c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0004ca 85ad      	LDD  R26,Y+13
0004cb 85be      	LDD  R27,Y+13+1
0004cc 85ef      	LDD  R30,Y+15
0004cd 89f8      	LDD  R31,Y+15+1
0004ce 9509      	ICALL
0004cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0004d0 89a8      	LDD  R26,Y+16
0004d1 89b9      	LDD  R27,Y+16+1
0004d2 9614      	ADIW R26,4
0004d3 940e 0530 	CALL __GETW1P
0004d5 83ee      	STD  Y+6,R30
0004d6 83ff      	STD  Y+6+1,R31
0004d7 81ae      	LDD  R26,Y+6
0004d8 81bf      	LDD  R27,Y+6+1
0004d9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0004da 89a8      	LDD  R26,Y+16
0004db 89b9      	LDD  R27,Y+16+1
0004dc 9614      	ADIW R26,4
0004dd 940e 0530 	CALL __GETW1P
0004df 87ea      	STD  Y+10,R30
0004e0 87fb      	STD  Y+10+1,R31
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0004e2 01de      	MOVW R26,R28
0004e3 961c      	ADIW R26,12
0004e4 940e 04f3 	CALL __ADDW2R15
0004e6 940e 0530 	CALL __GETW1P
0004e8 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0004e9 9610      	adiw r26,0
0004ea f039      	breq __delay_ms1
                 __delay_ms0:
                +
0004eb ed80     +LDI R24 , LOW ( 0x7D0 )
0004ec e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0004ed 9701     +SBIW R24 , 1
0004ee f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0004ef 95a8      	wdr
0004f0 9711      	sbiw r26,1
0004f1 f7c9      	brne __delay_ms0
                 __delay_ms1:
0004f2 9508      	ret
                 
                 __ADDW2R15:
0004f3 2400      	CLR  R0
0004f4 0daf      	ADD  R26,R15
0004f5 1db0      	ADC  R27,R0
0004f6 9508      	RET
                 
                 __ANEGW1:
0004f7 95f1      	NEG  R31
0004f8 95e1      	NEG  R30
0004f9 40f0      	SBCI R31,0
0004fa 9508      	RET
                 
                 __CWD1:
0004fb 2f6f      	MOV  R22,R31
0004fc 0f66      	ADD  R22,R22
0004fd 0b66      	SBC  R22,R22
0004fe 2f76      	MOV  R23,R22
0004ff 9508      	RET
                 
                 __DIVW21U:
000500 2400      	CLR  R0
000501 2411      	CLR  R1
000502 e190      	LDI  R25,16
                 __DIVW21U1:
000503 0faa      	LSL  R26
000504 1fbb      	ROL  R27
000505 1c00      	ROL  R0
000506 1c11      	ROL  R1
000507 1a0e      	SUB  R0,R30
000508 0a1f      	SBC  R1,R31
000509 f418      	BRCC __DIVW21U2
00050a 0e0e      	ADD  R0,R30
00050b 1e1f      	ADC  R1,R31
00050c c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00050d 60a1      	SBR  R26,1
                 __DIVW21U3:
00050e 959a      	DEC  R25
00050f f799      	BRNE __DIVW21U1
000510 01fd      	MOVW R30,R26
000511 01d0      	MOVW R26,R0
000512 9508      	RET
                 
                 __DIVW21:
000513 d00e      	RCALL __CHKSIGNW
000514 dfeb      	RCALL __DIVW21U
000515 f40e      	BRTC __DIVW211
000516 dfe0      	RCALL __ANEGW1
                 __DIVW211:
000517 9508      	RET
                 
                 __MANDW12:
000518 94e8      	CLT
000519 fff7      	SBRS R31,7
00051a c002      	RJMP __MANDW121
00051b dfdb      	RCALL __ANEGW1
00051c 9468      	SET
                 __MANDW121:
00051d 23ea      	AND  R30,R26
00051e 23fb      	AND  R31,R27
00051f f40e      	BRTC __MANDW122
000520 dfd6      	RCALL __ANEGW1
                 __MANDW122:
000521 9508      	RET
                 
                 __CHKSIGNW:
000522 94e8      	CLT
000523 fff7      	SBRS R31,7
000524 c002      	RJMP __CHKSW1
000525 dfd1      	RCALL __ANEGW1
000526 9468      	SET
                 __CHKSW1:
000527 ffb7      	SBRS R27,7
000528 c006      	RJMP __CHKSW2
000529 95a0      	COM  R26
00052a 95b0      	COM  R27
00052b 9611      	ADIW R26,1
00052c f800      	BLD  R0,0
00052d 9403      	INC  R0
00052e fa00      	BST  R0,0
                 __CHKSW2:
00052f 9508      	RET
                 
                 __GETW1P:
000530 91ed      	LD   R30,X+
000531 91fc      	LD   R31,X
000532 9711      	SBIW R26,1
000533 9508      	RET
                 
                 __GETW1PF:
000534 9005      	LPM  R0,Z+
000535 91f4      	LPM  R31,Z
000536 2de0      	MOV  R30,R0
000537 9508      	RET
                 
                 __PUTPARD1:
000538 937a      	ST   -Y,R23
000539 936a      	ST   -Y,R22
00053a 93fa      	ST   -Y,R31
00053b 93ea      	ST   -Y,R30
00053c 9508      	RET
                 
                 __SAVELOCR6:
00053d 935a      	ST   -Y,R21
                 __SAVELOCR5:
00053e 934a      	ST   -Y,R20
                 __SAVELOCR4:
00053f 933a      	ST   -Y,R19
                 __SAVELOCR3:
000540 932a      	ST   -Y,R18
                 __SAVELOCR2:
000541 931a      	ST   -Y,R17
000542 930a      	ST   -Y,R16
000543 9508      	RET
                 
                 __LOADLOCR6:
000544 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000545 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000546 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000547 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000548 8119      	LDD  R17,Y+1
000549 8108      	LD   R16,Y
00054a 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  22 r1 :   5 r2 :   0 r3 :   0 r4 :  11 r5 :   5 r6 :  10 r7 :   4 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  54 r17:  46 r18:  29 r19:   8 r20:   9 r21:  17 r22:  23 r23:   5 
r24:  27 r25:   7 r26: 166 r27:  80 r28:  18 r29:   1 r30: 244 r31:  88 
x  :  27 y  : 236 z  :  20 
Registers used: 29 out of 35 (82.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   5 
adiw  :  30 and   :   2 andi  :   6 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :  23 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   1 brmi  :   1 brne  :  47 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  72 
cbi   :   9 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  21 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 
cp    :   9 cpc   :  12 cpi   :  41 cpse  :   0 dec   :   6 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   3 jmp   :  24 ld    :  56 ldd   :  93 ldi   : 183 
lds   :   0 lpm   :  16 lsl   :   1 lsr   :   0 mov   :  24 movw  :  27 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   7 out   :  42 pop   :   1 push  :   1 rcall :  32 ret   :  35 
reti  :   0 rjmp  :  90 rol   :   3 ror   :   0 sbc   :   3 sbci  :   3 
sbi   :  17 sbic  :  16 sbis  :   0 sbiw  :  31 sbr   :   1 sbrc  :   2 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  83 std   :  38 sts   :   2 sub   :   3 subi  :  18 swap  :   1 
tst   :   8 wdr   :   1 
Instructions used: 66 out of 116 (56.9%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000a96   2586    124   2710   16384  16.5%
[.dseg] 0x000060 0x0001c8      0    104    104    1024  10.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 8 warnings
